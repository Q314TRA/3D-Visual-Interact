
precision highp float;

// Varying
varying vec3 vPosition;
varying vec3 vNormal;
varying vec2 vUV;

// Uniforms
uniform mat4 world;

// Refs
uniform vec3 cameraPosition;
uniform sampler2D textureSampler;
uniform sampler2D mapaNormales;
uniform sampler2D mapaSpec;

// colores
uniform vec3 color1;
uniform vec3 color2;
uniform vec3 color3;

void main(void) {
    vec3 vLightPosition = vec3(10,20,-20);
    
    // World values
    vec3 vPositionW = vec3(world * vec4(vPosition, 1.0));
    vec3 vNormalW = normalize(vec3(world * vec4(vNormal, 0.0)));
    vec3 viewDirectionW = normalize(cameraPosition - vPositionW);
    
    // Light
    vec3 lightVectorW = normalize(vLightPosition - vPositionW);
    vec3 color = texture2D(textureSampler, vUV).rgb;
	// calcular normales
	vec3 NormalMap = texture2D(mapaNormales, vUV).rgb;
    vec3 N = normalize(NormalMap * 2.0 - 1.0);
	// obtener nivel especular
	vec3 spec = texture2D(mapaSpec, vUV).rgb;
    
    
    // diffuse
    float ndl = max(0., dot(vNormalW, lightVectorW));
	// agregar luz de ambiente
	ndl += 0.25;
    
    // Specular
    vec3 angleW = normalize(viewDirectionW + lightVectorW);
    float specComp = max(0., dot(vNormalW, angleW));
    specComp = pow(specComp, max(1., 64.)) * 2.;
	// Reducir el nivel especular
	specComp *= 0.25;
	specComp *= spec.g;
    
	// correccion de color
	if(color.r >= 0.8 && color.g <= 0.2 && color.b <= 0.2)
	{
		color = color1;
	}
	else if(color.g >= 0.8 && color.r <= 0.2 && color.b <= 0.2)
	{
		color = color2;
	}
	else if(color.b >= 0.8 && color.g <= 0.2 && color.r <= 0.2)
	{
		color = color3;
	}
	gl_FragColor = vec4( (color + (NormalMap.g * .25)) * ndl + vec3(specComp), 1.);
}
	